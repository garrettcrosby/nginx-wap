Parameters:
  ImageUri:
    Description: 'URI of docker image for nginx proxy.'
    Type: String
  DefaultRegion:
    Description: 'Main region where resources in this project are.'
    Type: String
  AV1:
    Description: 'First availability zone for the WAP to work. (this should match zones of subnets where this will be deployed)'
    Type: String
  AV2:
    Description: 'Second availability zone for WAP.'
    Type: String
  NeededPorts:
    Type: CommaDelimitedList
    Description: 'The list of TCP ports needed for this proxy. Separate by comma.'
    Default: '1443,1444,1445,1446'
  vpc:
    Description: 'The id of the vpc the WAP will be deployed to.'
    Type: String
  subnet1:
    Description: 'Id of the subnet to deploy the WAP and its LB.'
    Type: String
  subnet2:
    Description: 'Id of the second subnet for the WAP and its LB.'
    Type: String
  needsServiceLinkedRole:
    Description: 'Whether or not you want CF to make a service linked role for ECS.'
    AllowedValues:
    - true
    - false
    Type: String

Conditions:
  ecsSLR: !Equals
  - !Ref needsServiceLinkedRole
  - 'true'
 
Resources:
  ecsServiceLinkedRole:
    Condition: ecsSLR
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: 'ecs.amazonaws.com'
      Description: 'Role To allow ECS to create and manage cluster.'
  ecsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Description: 'Used for ecs task.'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'      
      MaxSessionDuration: 3600
      Path: '/'
      RoleName: 'ecsTaskExecutionRole'
      Tags:
      - Key: 'deployment'
        Value: 'CF'
      - Key: 'stack'
        Value: 'wap'
    DeletionPolicy: 'Delete'
  wapLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/ecs/wap'
      RetentionInDays: 30
    DeletionPolicy: 'Delete'
  wapLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: 'ipv4'
      Name: 'wap-LoadBalancer'
      Scheme: 'internet-facing'
      Subnets:
      - !Ref subnet1
      - !Ref subnet2
      Type: 'network'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DeletionPolicy: 'Delete'
  wapSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Necessary ports for wap.'
      GroupName: 'wap-sg'
      SecurityGroupIngress:
      - IpProtocol: 'tcp'
        FromPort: 80
        ToPort: 80
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: !Select [0, !Ref NeededPorts] 
        ToPort: !Select [0, !Ref NeededPorts]
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: !Select [1, !Ref NeededPorts]
        ToPort: !Select [1, !Ref NeededPorts]
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: !Select [2, !Ref NeededPorts]
        ToPort: !Select [2, !Ref NeededPorts]
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: !Select [3, !Ref NeededPorts]
        ToPort: !Select [3, !Ref NeededPorts]
        CidrIp: 0.0.0.0/0
      #- IpProtocol: 'tcp'
      #  FromPort: !Select [4, !Ref NeededPorts]
      #  ToPort: !Select [4, !Ref NeededPorts]
      #  CidrIp: 0.0.0.0/0
      #- IpProtocol: 'tcp'
      #  FromPort: !Select [5, !Ref NeededPorts]
      #  ToPort: !Select [5, !Ref NeededPorts]
      #  CidrIp: 0.0.0.0/0
      #- IpProtocol: 'tcp'
      #  FromPort: !Select [6, !Ref NeededPorts]
      #  ToPort: !Select [6, !Ref NeededPorts]
      #  CidrIp: 0.0.0.0/0
      VpcId:
        Ref: 'vpc'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DeletionPolicy: 'Delete'
  wapTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      Name: 'wap-TG'
      Port: '443'
      Protocol: 'TCP'
      TargetType: 'ip'
      UnhealthyThresholdCount: 3
      VpcId: !Ref vpc
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DependsOn: wapLoadBalancer
    DeletionPolicy: 'Delete'
  wapListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: 443
      Protocol: 'TCP'
    DependsOn:
    - wapLoadBalancer
    DeletionPolicy: 'Delete'
  wapListener0:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: !Select [0, !Ref NeededPorts]
      Protocol: 'TCP'
    DependsOn:
    - wapLoadBalancer
    DeletionPolicy: 'Delete'
  wapListener1:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: !Select [1, !Ref NeededPorts]
      Protocol: 'TCP'
    DependsOn:
    - wapLoadBalancer
    DeletionPolicy: 'Delete'
  wapListener2:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: !Select [2, !Ref NeededPorts]
      Protocol: 'TCP'
    DependsOn:
    - wapLoadBalancer
    DeletionPolicy: 'Delete'
  wapListener3:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: !Select [3, !Ref NeededPorts]
      Protocol: 'TCP'
    DependsOn:
    - wapLoadBalancer
    DeletionPolicy: 'Delete'
  #wapListener4:
  #  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #  Properties:
  #    DefaultActions:
  #    - Type: forward
  #      TargetGroupArn: !Ref wapTG
  #    LoadBalancerArn: !Ref wapLoadBalancer
  #    Port: !Select [4, !Ref NeededPorts]
  #    Protocol: 'TCP'
  #  DependsOn:
  #  - wapLoadBalancer
  #  DeletionPolicy: 'Delete'
  #wapListener5:
  #  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #  Properties:
  #    DefaultActions:
  #    - Type: forward
  #      TargetGroupArn: !Ref wapTG
  #    LoadBalancerArn: !Ref wapLoadBalancer
  #    Port: !Select [5, !Ref NeededPorts]
  #    Protocol: 'TCP'
  #  DependsOn:
  #  - wapLoadBalancer
  #  DeletionPolicy: 'Delete'
  #wapListener6:
  #  Type: 'AWS::ElasticLoadBalancingV2::Listener'
  #  Properties:
  #    DefaultActions:
  #    - Type: forward
  #      TargetGroupArn: !Ref wapTG
  #    LoadBalancerArn: !Ref wapLoadBalancer
  #    Port: !Select [6, !Ref NeededPorts]
  #    Protocol: 'TCP'
  #  DependsOn:
  #  - wapLoadBalancer
  #  DeletionPolicy: 'Delete'
  wapCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: 'wap-cluster'
      ClusterSettings:
      - Name: 'containerInsights'
        Value: 'enabled'
      CapacityProviders:
      - 'FARGATE'
      - 'FARGATE_SPOT'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DeletionPolicy: 'Delete'
  wapTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
      - Cpu: 256
        Essential: true
        Name: 'nginx'
        Image: !Ref ImageUri
        MemoryReservation: 128
        PortMappings:
        - ContainerPort: 443
          HostPort: 443
          Protocol: 'tcp'
        StartTimeout: 30
        StopTimeout: 30
        WorkingDirectory: '/usr/local/'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: '/ecs/wap'
            awslogs-region: !Ref DefaultRegion
            awslogs-stream-prefix: 'nginx-wap'
        HealthCheck:
          Command:
          - curl http://localhost/health-check
          Interval: 10
          Timeout: 3
          Retries: 3
          StartPeriod: 30
      Cpu: '256'
      Memory: '512'
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !Ref ecsTaskExecutionRole
      TaskRoleArn: !Ref ecsTaskExecutionRole
      Family: 'wap'
      RequiresCompatibilities:
      - 'FARGATE'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'   
    DependsOn:
    - wapLogs
    - wapCluster
    - ecsTaskExecutionRole
    DeletionPolicy: 'Delete'
  wapService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref wapCluster
      ServiceName: 'wapService'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 30
      LaunchType: 'FARGATE'
      LoadBalancers:
      - TargetGroupArn: !Ref wapTG
        ContainerName: 'nginx'
        ContainerPort: '443'
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
          - !Ref subnet1
          SecurityGroups:
          - !Ref wapSG
          AssignPublicIp: ENABLED
      PlatformVersion: '1.4.0'
      #Role: 'AWSServiceRoleForECS'
      SchedulingStrategy: 'REPLICA'
      TaskDefinition: !Ref wapTask
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap' 
    DependsOn:
    - wapCluster
    - wapTask
    - wapLoadBalancer
    - wapSG
    - wapTG
    DeletionPolicy: 'Delete'
    