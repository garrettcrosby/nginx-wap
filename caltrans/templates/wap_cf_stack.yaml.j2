Description: 'All resources needed to deploy NGINX WAP to AWS.'

Parameters:
  needsServiceLinkedRole:
    Description: 'Whether or not you want CF to make a service linked role for ECS.'
    AllowedValues:
    - true
    - false
    Type: String

Conditions:
  ecsSLR: !Equals
  - !Ref needsServiceLinkedRole
  - 'true'

Resources:
  ecsServiceLinkedRole:
    Condition: ecsSLR
    Type: 'AWS::IAM::ServiceLinkedRole'
    Properties:
      AWSServiceName: 'ecs.amazonaws.com'
      Description: 'Role To allow ECS to create and manage cluster.'
  ecsTaskExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: '2008-10-17'
        Statement:
        - Sid: ''
          Effect: Allow
          Principal:
            Service: ecs-tasks.amazonaws.com
          Action: sts:AssumeRole
      Description: 'Used for ecs task.'
      ManagedPolicyArns:
      - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'
      MaxSessionDuration: 3600
      Path: '/'
      RoleName: 'ecsTaskExecutionRole'
      Tags:
      - Key: 'deployment'
        Value: 'CF'
      - Key: 'stack'
        Value: 'wap'
    DeletionPolicy: {{ DeletePolicy }}
  wapLogs:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: '/ecs/wap'
      RetentionInDays: 30
    DeletionPolicy: {{ DeletePolicy }}
  wapLoadBalancer:
    Type: 'AWS::ElasticLoadBalancingV2::LoadBalancer'
    Properties:
      IpAddressType: 'ipv4'
      LoadBalancerAttributes:
      - Key: 'routing.http2.enabled' 
        Value: 'false'
      Name: 'wap-LoadBalancer'
      Scheme: 'internet-facing'
      SecurityGroups:
      - !Ref wapSG
      Subnets:
      - {{ Subnet1 }}
      - {{ Subnet2 }}
      Type: 'application'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DependsOn:
    - wapSG
    DeletionPolicy: {{ DeletePolicy }}
  wapSG:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Necessary ports for wap.'
      GroupName: 'wap-sg'
      SecurityGroupIngress:
      - IpProtocol: 'tcp'
        FromPort: 8080
        ToPort: 8080
        CidrIp: 0.0.0.0/0
      - IpProtocol: 'tcp'
        FromPort: 443
        ToPort: 443
        CidrIp: 0.0.0.0/0
      {% for port in NeededPorts %}
      - IpProtocol: 'tcp'
        FromPort: {{ port }}
        ToPort: {{ port }}
        CidrIp: 0.0.0.0/0
      {% endfor %}
      VpcId: {{ Vpc }}
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DeletionPolicy: {{ DeletePolicy }}
  wapTG:
    Type: 'AWS::ElasticLoadBalancingV2::TargetGroup'
    Properties:
      HealthCheckEnabled: true
      HealthCheckIntervalSeconds: 15
      HealthCheckPath: '/health-check'
      HealthCheckPort: '8080'
      HealthCheckProtocol: 'HTTP'
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Name: 'wap-TG'
      Port: '443'
      Protocol: 'HTTPS'
      TargetType: 'ip'
      UnhealthyThresholdCount: 3
      VpcId: {{ Vpc }}
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DependsOn: wapLoadBalancer
    DeletionPolicy: {{ DeletePolicy }}
  wapListenerHTTPS:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: 443
      Protocol: 'HTTPS'
      Certificates:
      - CertificateArn: !Sub "arn:aws:iam::${AWS::AccountId}:server-certificate/wap_wildcard_cert"
    DependsOn:
    - wapLoadBalancer
    - wapTG
    DeletionPolicy: {{ DeletePolicy }}
{% for port in NeededPorts %}
  wapListener{{ port }}:
    Type: 'AWS::ElasticLoadBalancingV2::Listener'
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn: !Ref wapTG
      LoadBalancerArn: !Ref wapLoadBalancer
      Port: {{ port }}
      Protocol: 'HTTPS'
      Certificates:
      - CertificateArn: !Sub "arn:aws:iam::${AWS::AccountId}:server-certificate/wap_wildcard_cert"
    DependsOn:
    - wapLoadBalancer
    - wapTG
    DeletionPolicy: {{ DeletePolicy }}
{% endfor %}
  wapCluster:
    Type: 'AWS::ECS::Cluster'
    Properties:
      ClusterName: 'wap-cluster'
      ClusterSettings:
      - Name: 'containerInsights'
        Value: 'enabled'
      CapacityProviders:
      - 'FARGATE'
      - 'FARGATE_SPOT'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    {% if needsServiceLinkedRole == "true" %}
    DependsOn:
    - ecsServiceLinkedRole
    {% endif %}
    DeletionPolicy: {{ DeletePolicy }}
  wapTask:
    Type: 'AWS::ECS::TaskDefinition'
    Properties:
      ContainerDefinitions:
      - Cpu: 256
        Essential: true
        Name: 'nginx'
        Image: {{ Image }}
        MemoryReservation: 128
        PortMappings:
        - ContainerPort: 443
          HostPort: 443
          Protocol: 'tcp'
        StartTimeout: 30
        StopTimeout: 30
        WorkingDirectory: '/usr/local/'
        LogConfiguration:
          LogDriver: 'awslogs'
          Options:
            awslogs-group: '/ecs/wap'
            awslogs-region: {{ Region }}
            awslogs-stream-prefix: 'nginx-wap'
        HealthCheck:
          Command:
          - "CMD-SHELL" 
          - "curl http://localhost:8080/health-check || exit 1"
          Interval: 10
          Timeout: 3
          Retries: 3
          StartPeriod: 30
      Cpu: '256'
      Memory: '512'
      NetworkMode: 'awsvpc'
      ExecutionRoleArn: !Ref ecsTaskExecutionRole
      TaskRoleArn: !Ref ecsTaskExecutionRole
      Family: 'wap'
      RequiresCompatibilities:
      - 'FARGATE'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DependsOn:
    - wapLogs
    - wapCluster
    - ecsTaskExecutionRole
    DeletionPolicy: {{ DeletePolicy }}
  wapService:
    Type: 'AWS::ECS::Service'
    Properties:
      Cluster: !Ref wapCluster
      ServiceName: 'wapService'
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 50
      DesiredCount: 2
      EnableECSManagedTags: true
      EnableExecuteCommand: true
      HealthCheckGracePeriodSeconds: 30
      LaunchType: 'FARGATE'
      LoadBalancers:
      - TargetGroupArn: !Ref wapTG
        ContainerName: 'nginx'
        ContainerPort: '443'
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
          - {{ Subnet1 }}
          - {{ Subnet2 }}
          SecurityGroups:
          - !Ref wapSG
          AssignPublicIp: ENABLED
      PlatformVersion: '1.4.0'
      #Role: 'AWSServiceRoleForECS'
      SchedulingStrategy: 'REPLICA'
      TaskDefinition: !Ref wapTask
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DependsOn:
    - wapCluster
    - wapTask
    - wapLoadBalancer
    - wapSG
    - wapTG
    - wapListenerHTTPS
    {% for port in NeededPorts %}
    - wapListener{{ port }}
    {% endfor %}
    DeletionPolicy: {{ DeletePolicy }}
  wapAclUs:
    Type: AWS::WAFv2::WebACL
    Properties:
      DefaultAction:
        Block: {}
      Description: 'Allow traffic from USA only'
      Name: 'DomesticTraffic'
      VisibilityConfig:
        SampledRequestsEnabled: true
        CloudWatchMetricsEnabled: true
        MetricName: 'wap-acl-metrics'  
      Rules:
      - Name: 'DomesticTrafficRule'
        Priority: 0
        Action:
          Allow: {}
        Statement:
          GeoMatchStatement:
            CountryCodes:
            - US
        VisibilityConfig:
          SampledRequestsEnabled: true
          CloudWatchMetricsEnabled: true
          MetricName: 'DomesticTrafficMetrics'
      Scope: 'REGIONAL'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DeletionPolicy: {{ DeletePolicy }}
    DependsOn:
    - wapLoadBalancer
  wapAclAssociation:
    Type: AWS::WAFv2::WebACLAssociation
    Properties: 
      ResourceArn: !Ref wapLoadBalancer
      WebACLArn: !GetAtt wapAclUs.Arn
    DeletionPolicy: {{ DeletePolicy }}
    DependsOn:
    - wapLoadBalancer
    - wapAclUs
  wapAccelerator:
    Type: AWS::GlobalAccelerator::Accelerator
    Properties:
      Enabled: true
      IpAddressType: 'IPV4'
      Name: 'Wap-External-Static-IP'
      Tags:
        - Key: 'deployment'
          Value: 'CF'
        - Key: 'stack'
          Value: 'wap'
    DependsOn:
    - wapLoadBalancer
    DeletionPolicy: {{ DeletePolicy }}
  wapAcceleratorListener:
    Type: AWS::GlobalAccelerator::Listener
    Properties:
      AcceleratorArn: !Ref wapAccelerator
      PortRanges:
      {% for port in NeededPorts %}
        - FromPort: {{ port }}
          ToPort: {{ port }}
      {% endfor %}
      Protocol: 'TCP'
    DependsOn:
    - wapLoadBalancer
    - wapAccelerator
    DeletionPolicy: {{ DeletePolicy }}
  wapAcceleratorEndpoint:
    Type: AWS::GlobalAccelerator::EndpointGroup
    Properties:
      EndpointConfigurations:
      - ClientIPPreservationEnabled: true
        EndpointId: !Ref wapLoadBalancer
      EndpointGroupRegion: {{ Region }}
      ListenerArn: !Ref wapAcceleratorListener
    DependsOn:
    - wapLoadBalancer
    - wapAccelerator
    - wapAcceleratorListener
    DeletionPolicy: {{ DeletePolicy }}
    
      